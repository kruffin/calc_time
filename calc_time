#!/bin/bash

## This is a time calculating bash script. It expects an input file of which each line has the 
## form:
## {unix timestamp},{START or END},{Some descriptive text for yourself}
## 
## I currenlty populate such a file with a command like this:
## $> echo "`date +%s`,START,what i am working on" >> this_weeks_file.csv
##
## Now to parse that CSV with this script run:
## $> cat this_weeks_file.csv | ./calc_time
##
## Produces output like:
## Mon Mar  9 10:34:41 2015 Total: 8.35278
## Tue Mar 10 10:00:00 2015 Total: 7.76222
## Wed Mar 11 10:20:00 2015 Total: 7.02722
## Thu Mar 12 09:40:00 2015 Total: 8.20694
## Fri Mar 13 09:34:44 2015 Total: 1.73667
##                  Running Total: 33.0858


start=0
total=()
tDay=()
tStart=()
secInDay=$((60 * 60 * 24))

while read line
do
    #echo "inspecting line: ${line}"
    if [[ $line =~ ([0-9]+),([A-Z]+),(.*) ]] ; then
        #echo "matched line: ${line}"
        if [[ ${BASH_REMATCH[2]} == "START" ]] && [[ ${start} == 0 ]] ; then
            start=${BASH_REMATCH[1]}
            #echo 'matched start'
        elif [[ ${BASH_REMATCH[2]} == "END" ]] ; then
            total+=($((BASH_REMATCH[1] - start)))
            curDay=$((start / secInDay))
            #echo 'Current Day: '$curDay
            if [[ $curDay == ${tDay[${#tDay[@]} - 1]} ]] ; then
                tStart+=(${tStart[${#tStart[@]} - 1]})
            else
                tStart+=(${start})
            fi
            tDay+=($curDay)
            start=0
            arrEnd=${#tStart[@]}
            #echo 'matched end', ${total[${#total[@]} - 1]}, ${tStart[${#tStart[@]} - 1]}
        fi
    fi
done

if [[ ${start} != 0 ]] ; then
    total+=($((`date +%s` - start)))
    curDay=$((start / secInDay))
    #echo 'Current Day: '$curDay, ${tDay[${#tDay[@]} - 1]}
    if [[ $curDay == ${tDay[${#tDay[@]} - 1]} ]] ; then
        tStart+=(${tStart[${#tStart[@]} - 1]})
    else
        tStart+=(${start})
    fi
    tDay+=($curDay)
    #echo 'matched end', ${total[${#total[@]} - 1]}, ${tStart[${#tStart[@]} - 1]}
fi

tmp=0
runningTotal=0
idx=0
for t in ${total[@]} 
do
    tf=$(awk -v t=$t 'BEGIN { print t / 60 / 60 }')
    tmp=$(awk -v tmp=$tmp -v tf=$tf 'BEGIN { print tmp + tf }')
    runningTotal=$(awk -v rt=$runningTotal -v tf=$tf 'BEGIN { print rt + tf }')
    if [[ $idx != ${#total[@] - 1} ]] && [[ ${tDay[${idx}]} != ${tDay[${idx} + 1]} ]] ; then
        dateString=$(perl -e "print scalar(localtime(${tStart[${idx}]}))")
        #dateString=$(awk -v time=${tStart[${idx}]} 'BEGIN { print strftime("%c",time) }')
        echo "${dateString}" 'Total:' $tmp
        tmp=0
    fi
    # echo $tDay[${idx}] 'Total:' $tf
    idx=$((idx + 1))
done

echo $'\t'$'\t'" Running Total: ${runningTotal}"